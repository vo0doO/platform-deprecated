{"version":3,"sources":["ModalForm.js","registerServiceWorker.js","index.js"],"names":["ModalForm","state","modal16","toggle","nr","modalNumber","_this","setState","Object","defineProperty","react_default","a","createElement","mdbreact_esm","onClick","this","isOpen","fluid","className","md","sm","color","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_ModalForm","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a7a5d6d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  MDBContainer,\r\n  MDBBtn,\r\n  MDBModal,\r\n  MDBModalBody,\r\n  MDBModalHeader,\r\n  MDBModalFooter,\r\n  MDBCol,\r\n  MDBRow\r\n} from \"mdbreact\";\r\n\r\nclass ModalForm extends Component {\r\n  state = {\r\n    modal16: false\r\n  };\r\n\r\n  toggle = nr => () => {\r\n    let modalNumber = \"modal\" + nr;\r\n    this.setState({\r\n      [modalNumber]: !this.state[modalNumber]\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <MDBContainer>\r\n        <MDBBtn onClick={this.toggle(16)}>MDBModal</MDBBtn>\r\n        <MDBModal isOpen={this.state.modal16} toggle={this.toggle(16)}>\r\n          <MDBModalHeader toggle={this.toggle(16)}>\r\n            MDBModal title\r\n          </MDBModalHeader>\r\n          <MDBModalBody>\r\n            <MDBContainer fluid className=\"text-white\">\r\n              <MDBRow>\r\n                <MDBCol md=\"4\" className=\"bg-info\">\r\n                  .col-md-4\r\n                </MDBCol>\r\n                <MDBCol md=\"4\" className=\"ml-auto bg-info\">\r\n                  .col-md-4 .ml-auto\r\n                </MDBCol>\r\n              </MDBRow>\r\n              <br />\r\n              <MDBRow>\r\n                <MDBCol md=\"3\" className=\"ml-auto bg-info\">\r\n                  .col-md-3 .ml-auto\r\n                </MDBCol>\r\n                <MDBCol md=\"2\" className=\"ml-auto bg-info\">\r\n                  .col-md-2 .ml-auto\r\n                </MDBCol>\r\n              </MDBRow>\r\n              <MDBRow>\r\n                <MDBCol md=\"6\" className=\"ml-5 bg-info\">\r\n                  .col-md-6 .ml-5\r\n                </MDBCol>\r\n              </MDBRow>\r\n              <br />\r\n              <MDBRow>\r\n                <MDBCol sm=\"9\" className=\"bg-info\">\r\n                  Level 1: .col-sm-9\r\n                  <MDBRow>\r\n                    <MDBCol sm=\"6\" className=\"bg-info\">\r\n                      Level 2: .col-8 .col-sm-6\r\n                    </MDBCol>\r\n                    <MDBCol sm=\"6\" className=\"bg-info\">\r\n                      Level 2: .col-4 .col-sm-6\r\n                    </MDBCol>\r\n                  </MDBRow>\r\n                </MDBCol>\r\n              </MDBRow>\r\n            </MDBContainer>\r\n          </MDBModalBody>\r\n          <MDBModalFooter>\r\n            <MDBBtn color=\"secondary\" onClick={this.toggle(16)}>\r\n              Close\r\n            </MDBBtn>\r\n            <MDBBtn color=\"primary\">Save changes</MDBBtn>\r\n          </MDBModalFooter>\r\n        </MDBModal>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalForm;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"./index.css\";\r\nimport ModalForm from \"./ModalForm\";\r\n\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<ModalForm />, document.getElementById(\"ModalForm\"));\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}